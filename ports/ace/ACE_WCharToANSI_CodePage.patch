diff --git a/ace/ace_wchar.h b/ace/ace_wchar.h
index 4488e9d..c30cd97 100644
--- a/ace/ace_wchar.h
+++ b/ace/ace_wchar.h
@@ -145,7 +145,7 @@ class ACE_Wide_To_Ascii
 {
 public:
   /// Constructor must take a wchar string.
-  ACE_Wide_To_Ascii (const wchar_t *s);
+  ACE_Wide_To_Ascii (const wchar_t *s, unsigned int cp = 0);
 
   /// Destructor will free up the memory.
   ~ACE_Wide_To_Ascii ();
@@ -154,7 +154,7 @@ public:
   char *char_rep ();
 
   /// Converts an wchar_t string to ascii and returns a new string.
-  static char *convert (const wchar_t *wstr);
+  static char *convert (const wchar_t *wstr, unsigned int cp = 0);
 
 private:
   /// Internal pointer to the converted string.
@@ -183,7 +183,7 @@ class ACE_Ascii_To_Wide
 {
 public:
   /// Constructor must take a wchar string.
-  ACE_Ascii_To_Wide (const char *s);
+  ACE_Ascii_To_Wide (const char *s, unsigned int cp = 0);
 
   /// Destructor will free up the memory.
   ~ACE_Ascii_To_Wide ();
@@ -192,7 +192,7 @@ public:
   wchar_t *wchar_rep ();
 
   /// Converts an char string to unicode/wide and returns a new string.
-  static wchar_t *convert (const char *str);
+  static wchar_t *convert (const char *str, unsigned int cp = 0);
 
 private:
   /// Internal pointer to the converted string.
diff --git a/ace/ace_wchar.inl b/ace/ace_wchar.inl
index b390b32..0f8b75a 100644
--- a/ace/ace_wchar.inl
+++ b/ace/ace_wchar.inl
@@ -23,14 +23,16 @@ ACE_Wide_To_Ascii::char_rep ()
 }
 
 inline char *
-ACE_Wide_To_Ascii::convert (const wchar_t *wstr)
+ACE_Wide_To_Ascii::convert (const wchar_t *wstr, unsigned int cp)
 {
   // Short circuit null pointer case
   if (wstr == 0)
     return 0;
 
 # if defined (ACE_WIN32)
-  UINT const cp = GetACP ();  // Codepage
+  if (0 == cp) {
+      cp = GetACP();  // Codepage
+  }
   int const len = ::WideCharToMultiByte (cp,
                                          0,
                                          wstr,
@@ -48,6 +50,7 @@ ACE_Wide_To_Ascii::convert (const wchar_t *wstr)
 # else  /* ACE_WIN32 */
   size_t const len = ::wcslen (wstr) + 1;
 # endif /* ACE_WIN32 */
+  ACE_UNUSED_ARG(cp);
 
 #if !defined (ACE_HAS_ICONV)
   char *str = new char[len];
@@ -89,7 +92,7 @@ ACE_Wide_To_Ascii::convert (const wchar_t *wstr)
 }
 
 inline
-ACE_Wide_To_Ascii::ACE_Wide_To_Ascii (const wchar_t *s)
+ACE_Wide_To_Ascii::ACE_Wide_To_Ascii (const wchar_t *s, unsigned int cp)
 {
 #if defined(ACE_HAS_ICONV)
   if (ACE_Wide_To_Ascii_iconv_env == 0)
@@ -97,7 +100,7 @@ ACE_Wide_To_Ascii::ACE_Wide_To_Ascii (const wchar_t *s)
       ACE_Wide_To_Ascii_iconv_env = iconv_open("", "WCHAR_T");
     }
 #endif
-  s_ = ACE_Wide_To_Ascii::convert (s);
+  s_ = ACE_Wide_To_Ascii::convert (s, cp);
 }
 
 inline
@@ -113,18 +116,21 @@ ACE_Ascii_To_Wide::wchar_rep ()
 }
 
 inline wchar_t *
-ACE_Ascii_To_Wide::convert (const char *str)
+ACE_Ascii_To_Wide::convert (const char *str, unsigned int cp)
 {
   // Short circuit null pointer case
   if (!str)
     return nullptr;
 
 # if defined (ACE_WIN32)
-  UINT const cp = GetACP ();  // Codepage
+  if (0 == cp) {
+      cp = GetACP();  // Codepage
+  }
   int const len = ::MultiByteToWideChar (cp, 0, str, -1, 0, 0);
 # else /* ACE_WIN32 */
   size_t const len = strlen (str) + 1;
 # endif /* ACE_WIN32 */
+  ACE_UNUSED_ARG(cp);
 
 #if !defined (ACE_HAS_ICONV)
   wchar_t *wstr = new wchar_t[len];
@@ -164,7 +170,7 @@ ACE_Ascii_To_Wide::convert (const char *str)
 }
 
 inline
-ACE_Ascii_To_Wide::ACE_Ascii_To_Wide (const char *s)
+ACE_Ascii_To_Wide::ACE_Ascii_To_Wide (const char *s, unsigned int cp)
 {
 #if defined(ACE_HAS_ICONV)
   if (ACE_Ascii_To_Wide_iconv_env == 0)
@@ -172,7 +178,7 @@ ACE_Ascii_To_Wide::ACE_Ascii_To_Wide (const char *s)
       ACE_Ascii_To_Wide_iconv_env = iconv_open("WCHAR_T", "");
     }
 #endif
-  s_ = ACE_Ascii_To_Wide::convert (s);
+  s_ = ACE_Ascii_To_Wide::convert (s, cp);
 }
 
 ACE_END_VERSIONED_NAMESPACE_DECL
